module EvolutionSpec where

import Test.Hspec
import qualified Data.Vector as V
import Data.Maybe (fromMaybe, fromJust)
import System.IO
import Control.Monad.Random
import System.Random.Mersenne.Pure64
import Data.List
-- for comparing
import Data.Ord

import Evolution
import Utils

convertToGenome :: [[Double]] -> [Genome Double]
convertToGenome ds = ds

zeroFitnessGenomes :: [(Genome Double, Int)]
zeroFitnessGenomes = [
    ([0.639029112946153,0.9177993071234348,0.9277629538400791,0.4500661989089475,0.12801583543589623,0.6983922871379614,7.932639896663873e-2,0.582202856157836,0.3125235072221777,0.3320284826725428,0.7758257670659144,3.651906265743221e-2,0.5886620630522506,0.47315639486417693,0.9869270116742968,0.5319121143895228,0.9820490379592067,0.559217331399263,0.6376018474104255,0.3262544449713122,0.27224854841205604,0.37961904910180433,0.7624224755485205,0.21669684323212668,0.7054854979877753,0.5868631516049998,0.9701062880906831,0.7930114794111609,0.34355701374266856,0.8483398432774707,0.6341973921302186,0.5290898354698944],0),
    ([0.4297459566410715,0.2587605505586458,0.3431185458037921,0.3031758401551494,0.2921028203494441,0.6990471551966467,0.31212707228174985,0.7559778977477764,0.1408655986179035,0.34236056589803776,0.5408133476630487,0.9885524145219855,0.6617244842295475,0.9232194249371494,0.4986047512438796,0.2292763013468394,0.5121396455732262,0.8146891151039715,0.9566836358522277,0.6039412501628156,0.94744054492713,0.8090216209990453,0.12926121463312612,0.947334660096278,0.5858111656115089,0.4089017991593952,0.8709626764181655,0.8260448173391158,5.272639870464524e-2,0.9495372124256857,0.7338178170584473,7.763408864166965e-2],0),
    ([0.9986597130827647,7.17466901173125e-2,0.7559079059084541,0.41938673371429713,0.33133970374740007,0.6935171574642146,0.639046821356374,0.8081290369659117,0.36466233842346873,0.26535062472536364,0.9832204422637045,0.6835474559452788,0.23361537271207877,0.24846670371479573,0.5226664791332264,0.20285019397150728,0.5578791247990813,0.3257629264553221,0.9461403361988749,0.621674782722616,5.0196804541483786e-2,0.4150723284847556,5.723068068369441e-2,0.3035672826993172,0.4768815231570255,0.9254650233630956,9.365851106944756e-2,0.7028549270302967,3.323285442970414e-2,4.850110947038089e-2,0.7497753949296616,0.7253142666789149],0)
    ,([3.319453188697152e-2,0.22062500079520553,0.17351933537930553,0.4804177368740776,0.2060198796042868,0.2192888502136051,0.10303318280620721,0.5843411343318522,0.7959226195740271,0.1282394340579135,0.49522591774358826,0.5725884405257989,0.8570923651442708,0.8475038258882087,0.5051401524949999,0.6887868145464414,0.3729721019299762,1.4645787431792345e-2,0.6187833178319756,0.3759461090351258,0.5088177400240202,0.8863939137689556,0.7821582155702055,0.9133565846551668,0.40181417412384834,0.9614100209667384,0.3585640588860445,0.3901184322089932,0.4786002981243028,0.8264056718381312,0.9784156420733696,0.22428855823603666],0)
    ,([0.639029112946153,0.9177993071234348,0.9277629538400791,0.3031758401551494,0.12801583543589623,0.6983922871379614,7.932639896663873e-2,0.582202856157836,0.3125235072221777,0.3320284826725428,0.7758257670659144,3.651906265743221e-2,0.5886620630522506,0.47315639486417693,0.4986047512438796,0.2292763013468394,0.9820490379592067,0.559217331399263,0.6376018474104255,0.3262544449713122,0.27224854841205604,0.37961904910180433,0.7624224755485205,0.947334660096278,0.7054854979877753,0.5868631516049998,0.8709626764181655,0.7930114794111609,0.34355701374266856,0.8483398432774707,0.6341973921302186,0.5290898354698944],0)
    ,([0.386859585845982,0.7156441003746732,0.1774050478317435,0.4341755348696986,2.9128062281369216e-2,0.7548471801836213,0.17653420176455759,0.9555662558367741,4.985207702826666e-2,4.522889991044654e-2,0.5980778883642737,0.9438647668014168,0.5671457006802753,0.6998308701878941,0.45039509911499254,0.5568593581270275,0.19047995813371277,0.8082564937044633,0.9292957240600881,0.5138133605985482,0.6529192711666706,0.7388247540521968,0.565176224424067,0.28218770298250107,0.7621068508397716,0.8323224507809562,0.3174768363519943,0.9508662879834543,0.48402905040646715,0.4367870427746702,0.7565732174368998,0.25134469690408234],0)
    ]

testGenomes10lowVariance :: [(Genome Double, Int)]
testGenomes10lowVariance = [
     ([0.4297459566410715,0.2587605505586458,0.3431185458037921,0.4500661989089475,0.2921028203494441,0.6990471551966467,0.31212707228174985,0.7559778977477764,0.1408655986179035,0.34236056589803776,0.5408133476630487,0.9885524145219855,0.6617244842295475,0.9232194249371494,0.9869270116742968,0.5319121143895228,0.5121396455732262,0.8146891151039715,0.9566836358522277,0.6039412501628156,0.94744054492713,0.8090216209990453,0.12926121463312612,0.21669684323212668,0.5858111656115089,0.4089017991593952,0.9701062880906831,0.8260448173391158,5.272639870464524e-2,0.9495372124256857,0.7338178170584473,7.763408864166965e-2],1)
    ,([0.1936708669435191,0.22632886931875995,0.7655498878502419,0.10547757764974719,0.5333340752118093,0.9624470139851369,0.1659972254142037,5.644414242308671e-2,0.4631465410289397,2.0072332383980207e-3,0.5338756577345705,0.3276336809549548,0.9201282080021898,0.1517721979833606,0.9281444902527468,5.550979876316031e-3,0.30989506849092296,0.5576327064668819,0.7707770548262644,0.46323727131164616,0.3052494260469082,0.3828839804008304,0.9086577529645923,0.38493253621378054,0.5633798624790782,0.735355347240705,0.7125599932600444,0.3117945348896658,0.25895973189425037,0.1299602354085304,0.6663749954663076,0.21810712656840958],1)
    ,([0.731782218027517,0.7680008985784018,0.46723363640276694,5.68220999185759e-2,0.9913215318668208,0.12453798080408551,0.9379650372172597,0.552033993912445,8.279568984322239e-2,0.84457949928236,0.5611073713723693,0.9853262914986648,0.12861940332275434,0.20538014789690728,0.6898295947906259,0.9412503654630094,0.4202896629427425,2.9889777216565383e-2,1.143158757677798e-2,0.41019409606018187,8.851846429845656e-2,0.36497446318033144,0.929752832527163,0.6905315568706896,0.9415806636927267,0.20241970940205978,0.7077664313845168,0.5152850831004808,0.3902786097217209,0.6887274874345297,0.4658246617053402,0.9221766798269555],1)
    ,([0.9986597130827647,7.17466901173125e-2,0.7559079059084541,0.41938673371429713,0.33133970374740007,0.6935171574642146,0.639046821356374,0.8081290369659117,0.36466233842346873,0.26535062472536364,0.9832204422637045,0.6835474559452788,0.23361537271207877,0.24846670371479573,0.5226664791332264,0.20285019397150728,0.5578791247990813,0.3257629264553221,0.9461403361988749,0.621674782722616,5.0196804541483786e-2,0.4150723284847556,5.723068068369441e-2,0.3035672826993172,0.4768815231570255,0.9254650233630956,9.365851106944756e-2,0.7028549270302967,3.323285442970414e-2,4.850110947038089e-2,0.7497753949296616,0.7253142666789149],0)
    ,([3.319453188697152e-2,0.22062500079520553,0.17351933537930553,0.4804177368740776,0.2060198796042868,0.2192888502136051,0.10303318280620721,0.5843411343318522,0.7959226195740271,0.1282394340579135,0.49522591774358826,0.5725884405257989,0.8570923651442708,0.8475038258882087,0.5051401524949999,0.6887868145464414,0.3729721019299762,1.4645787431792345e-2,0.6187833178319756,0.3759461090351258,0.5088177400240202,0.8863939137689556,0.7821582155702055,0.9133565846551668,0.40181417412384834,0.9614100209667384,0.3585640588860445,0.3901184322089932,0.4786002981243028,0.8264056718381312,0.9784156420733696,0.22428855823603666],2)
    ,([0.639029112946153,0.9177993071234348,0.9277629538400791,0.3031758401551494,0.12801583543589623,0.6983922871379614,7.932639896663873e-2,0.582202856157836,0.3125235072221777,0.3320284826725428,0.7758257670659144,3.651906265743221e-2,0.5886620630522506,0.47315639486417693,0.4986047512438796,0.2292763013468394,0.9820490379592067,0.559217331399263,0.6376018474104255,0.3262544449713122,0.27224854841205604,0.37961904910180433,0.7624224755485205,0.947334660096278,0.7054854979877753,0.5868631516049998,0.8709626764181655,0.7930114794111609,0.34355701374266856,0.8483398432774707,0.6341973921302186,0.5290898354698944],2)
    ,([0.386859585845982,0.7156441003746732,0.1774050478317435,0.4341755348696986,2.9128062281369216e-2,0.7548471801836213,0.17653420176455759,0.9555662558367741,4.985207702826666e-2,4.522889991044654e-2,0.5980778883642737,0.9438647668014168,0.5671457006802753,0.6998308701878941,0.45039509911499254,0.5568593581270275,0.19047995813371277,0.8082564937044633,0.9292957240600881,0.5138133605985482,0.6529192711666706,0.7388247540521968,0.565176224424067,0.28218770298250107,0.7621068508397716,0.8323224507809562,0.3174768363519943,0.9508662879834543,0.48402905040646715,0.4367870427746702,0.7565732174368998,0.25134469690408234],1)
    ,([0.41041149616697925,0.2735096273271338,3.074968086727803e-3,0.8326993178292911,0.9446873012869538,0.40360543581711017,2.517414237902671e-2,0.419208112048004,0.8033406969051194,0.5058731552642848,0.9783293503421909,0.5622649929479595,0.288247506512757,0.3090345579903909,0.8036381711844978,0.5140425542404833,0.9698492608963475,0.9672743833883537,0.31035126465364826,0.9161268077666177,0.8483558290333678,0.17454181230469568,0.57311297845946,0.7479239564986622,0.805475242577292,0.9558985596835924,0.6215998903632909,0.666842971924689,0.28065755922013136,0.21188079087209855,0.6030717765050353,0.9301106201169111],2)
    ,([0.9142449181328732,0.9314718854711033,0.8511813374277557,0.6437713716369489,0.7340990675055505,0.7745520648247672,0.3335449659688273,0.7091775403262277,0.14848526587112665,0.7489430791561003,0.2526578630237809,0.9591497491087826,0.3315857546907137,0.9673021921946074,0.3469939247592453,0.40248762692100126,0.4102863311114613,0.3808807983747955,0.6378497434753656,0.6858391260092225,0.3073946273718209,0.7026224088802921,0.27920675909868997,0.8079015179722934,0.7781614934671521,0.7687459402050277,0.283342908699292,5.9049856537159995e-2,0.42861868914772705,0.19834408828850392,0.31044543788797896,0.6251862813334703],2)
    ,([8.376580972813086e-2,0.22312239225039754,0.6410893793398129,0.8338430023526281,0.1547279523084184,0.5168462997571281,0.4698963925227333,0.43576887424530053,0.8664268642479547,0.8018264269383629,0.319916736787632,0.5882533573195114,0.12697611651511376,0.5371171908948846,0.622543175044525,0.530303525299501,0.5387893295355326,0.8583167058874226,0.8057907059947403,0.32241691180066057,8.57869453616289e-3,2.1291273462959337e-2,0.338909355060656,0.6866784044037877,0.7609519045452916,0.7261287752758075,0.27211308703304693,0.9492615861338509,0.6022154364791615,0.9465627448597933,0.3337489767930327,0.408570949459648],1)
    ]


spec :: Spec
spec = do

    describe "randomGenomes" $ do
        it "should return a genome of zeros when called with the range of 0.0 to 0.0" $ do
            g <- newPureMT
            let hundredOppsZerosOnly    =   evalRand (randomGenomes 60 64 (0.0::Double) (0.0::Double) ) g
            hundredOppsZerosOnly `shouldBe` convertToGenome [replicate 64 x | x <- replicate 60 (0.0::Double)]
        it "should return the proper length of both each genome and the list of genomes" $ do
            g <- newPureMT
            let numberofGenomes = 60
            let genomeLength = 64
            let hundredOppsPlusToPlus   =   evalRand (randomGenomes numberofGenomes genomeLength (0.0::Double) (1.0::Double) ) g
            length hundredOppsPlusToPlus `shouldBe` 60
            length (filter (/=(genomeLength)) [length singleGenome | singleGenome <- hundredOppsPlusToPlus]) `shouldBe` 0
            length (filter (==(genomeLength)) [length singleGenome | singleGenome <- hundredOppsPlusToPlus]) `shouldBe` numberofGenomes
        it "all elements should be within the given range" $ do
            g <- newPureMT
            let numberofGenomes = 60
            let genomeLength = 64

            let hundredOppsPlusToPlus   =   evalRand (randomGenomes numberofGenomes genomeLength (0.0::Double) (1.0::Double) ) g
            length ([x | singleGenome <- hundredOppsPlusToPlus, x <- singleGenome, x<(0.0::Double), x > (1.0::Double)]) `shouldBe` 0

            let hundredOppsMinusToPlus  =   evalRand (randomGenomes numberofGenomes genomeLength (-1.0::Double) (1.0::Double) ) g
            length ([x | singleGenome <- hundredOppsMinusToPlus, x <- singleGenome, x<(-1.0::Double), x > (1.0::Double)]) `shouldBe` 0

    describe "tournamentSelection" $ do
        it "should NEVER return the default empty list when the population has even one element with a 0 fitness" $ do
            g <- newPureMT
            let tournamentZeros = evalRand (selectionTournament zeroFitnessGenomes 2) g
            tournamentZeros `shouldNotBe` []
            let tournamentZeros1size = evalRand (selectionTournament zeroFitnessGenomes 1) g
            tournamentZeros1size `shouldNotBe` []
            let tournamentGeneral = evalRand (selectionTournament testGenomes10lowVariance 2) g
            tournamentGeneral `shouldNotBe` []
            let tournamentGeneral0size = evalRand (selectionTournament testGenomes10lowVariance 1) g
            tournamentGeneral0size `shouldNotBe` []
            let tournamentGeneral5size = evalRand (selectionTournament testGenomes10lowVariance 10) g
            tournamentGeneral5size `shouldNotBe` []
            let tournamentZeros5size = evalRand (selectionTournament zeroFitnessGenomes 10) g
            tournamentZeros5size `shouldNotBe` []


    -- TODO implement the following tests from main as specs:
    -- -- ************************
    -- -- * TESTS
    -- let evalsingletest = evalRand (mapM (\opps -> evaluateNoCoin opps genOnesOnly) twentyFixedRandomGenomes) g
    -- let ones = length $ filter (==(1)) evalsingletest
    -- let minusones = length $ filter (==(-1)) evalsingletest
    -- let draws = length $ filter (==(0)) evalsingletest
    -- print (minusones,ones,draws)
    -- --print evalsingletest

    -- -- ************************
    -- -- * TEST as above but returns the number of -1s only (wins of player provided - White)
    -- let evalagainstmultiple = evalRand (evaluateNoCoinAgainstMultiple twentyFixedRandomGenomes genOnesOnly) g
    -- print $ evalagainstmultiple == minusones

    -- -- ************************
    -- -- * TEST EVALUATE TO TUPLE
    -- let gen12 = gen1:gen2:[]
    -- let evaluateToTuples = evaluateToTuple gen12 twentyFixedRandomGenomes
    -- let c = [(a,cc) | (a,b) <- evaluateToTuples, let cc = evalRand b g]
    -- print $ "Number of white wins per given genome: " ++ show c

    -- -- ***********************
    -- -- * VERIFY CORRECTNESS OF EVALUATION TO TUPLE - testing
    -- let evaltest2 = evalRand (mapM (\opps -> evaluateNoCoin opps gen1) twentyFixedRandomGenomes) g
    -- print $ (length $ filter (==(-1)) evaltest2) == (snd $ head c)
    -- let evaltest3 = evalRand (mapM (\opps -> evaluateNoCoin opps gen2) twentyFixedRandomGenomes) g
    -- print $ (length $ filter (==(-1)) evaltest3) == (snd $ head $ tail c)

    -- -- ************************
    -- -- * TESTS TO RUN FOR TWO SINGLE GENOMES, TEST IS REPEATED k TIMES
    -- -- let evalsingletest = evaluateNoCoin genOnesOnly gen1
    -- -- let l = sequence (replicate 50 evalsingletest)
    -- -- let p = evalRand l g
    -- -- let ones = length $ filter (==(1)) p
    -- -- let minusones = length $ filter (==(-1)) p
    -- -- let draws = length $ filter (==(0)) p
    -- -- print (minusones,ones,draws)



            